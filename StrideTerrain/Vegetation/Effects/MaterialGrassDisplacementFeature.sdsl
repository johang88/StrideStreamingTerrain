namespace StrideTerrain.Vegetation.Effects
{
    shader MaterialGrassDisplacementFeature 
        : IMaterialSurface, PositionStream4, NormalStream, TransformationBase, Transformation, ShaderBase, Texturing, TerrainQuery, Math, TransformationInstancing, Global, NormalUpdate
    {
        override void Compute()
        {
        }

        stage override void TransformPosition()
        {
            //float4x4 instanceWorld = GetInstanceWorld(streams.InstanceID);

            //float2 grassPosition = instanceWorld._m30_m32;

            //// Wind
            //float windSpeed = 0.5f;
            //float windFrequency = 0.8f;

            //// Instance variation to avoid everything moving identically
            //float instanceSeed = float(streams.InstanceID) * 12.345; 

            //// Compute a nice waving offset
            //float windOffsetX = sin(Time * windSpeed + grassPosition.x * 0.1 + instanceSeed) * 0.1;
            //float windOffsetZ = cos(Time * windSpeed + grassPosition.y * 0.1 + instanceSeed) * 0.1;

            //streams.PositionWS.x += windOffsetX * streams.PositionWS.y;
            //streams.PositionWS.z += windOffsetZ * streams.PositionWS.y;

            //// Move to terrain height
            //float2 terrainAtlasUv = GetTerrainAtlasUv(grassPosition.x, grassPosition.y);
            //float terrainHeight = GetTerrainHeightAt(terrainAtlasUv);
            //uint backgroundTextureIndex = GetBackgroundTextureIndexAt(terrainAtlasUv);

            //streams.PositionWS.y += terrainHeight;

            //// TODO: Very nice hardcode.
            //float isGrass = (backgroundTextureIndex == 0 || backgroundTextureIndex == 4 || backgroundTextureIndex == 22 || backgroundTextureIndex == 27 || backgroundTextureIndex == 28) ? 1 : 0;
            
            //// cull
            //streams.PositionWS.y /= isGrass;
        }
    };
}
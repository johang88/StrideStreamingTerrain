/*
Orignally from Ogre3d Terra Sample:

OGRE (www.ogre3d.org) is made available under the MIT License.

Copyright (c) 2000-present Torus Knot Software Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

namespace StrideTerrain.TerrainSystem.Effects.Shadows
{
    shader TerrainShadowGenerator : ComputeShaderBase, TerrainData
    {
        stage RWTexture2D<float4> ShadowMap;

        stage float2 Delta;
		stage float2 XyStep;
		stage int IsSteep;

        cbuffer StartsBuffer
		{
			int4 StartXY[4096];
		};

		struct PerGroupDataStruct
		{
			int iterations;
			float deltaErrorStart;
			float padding0;
			float padding1;
		};

		cbuffer PerGroupDataBuffer
		{
			PerGroupDataStruct PerGroupData[4096];
		};

		stage float HeightDelta;

		stage uint ShadowMapToTerrainSize;

		float SampleHeightmap(uint2 pos)
		{
			pos *= ShadowMapToTerrainSize;
			
			uint2 sectorPos = min(uint2(ChunksPerRow, ChunksPerRow), pos / ChunkSize);
			uint sectorIndex = sectorPos.y * ChunksPerRow + sectorPos.x;
			uint chunkIndex = SectorToChunkMapBuffer[sectorIndex];

			ChunkData chunk = ChunkBuffer[chunkIndex];
			uint lodLevel = chunk.Data0 & 0xFF;
			uint scale = 1 << lodLevel;
			pos /= scale;

			int2 chunkPosition = int2(pos.x % ChunkSize, pos.y % ChunkSize);
			int2 uv = UnpackUv(chunk) + chunkPosition;

			float height = Heightmap.Load(int3(uv, 0)).x;
			return height;
		}

		float2 CalcShadow(int2 xyPos, float2 prevHeight)
		{
			prevHeight.x -= HeightDelta;
			prevHeight.y = prevHeight.y * 0.985 - HeightDelta; //Used for the penumbra region

			float currHeight = SampleHeightmap((uint2)xyPos);

			float shadowValue = smoothstep(prevHeight.y, prevHeight.x, currHeight + 0.001);
			prevHeight.x = currHeight >= prevHeight.x ? currHeight : prevHeight.x;
			prevHeight.y = currHeight >= prevHeight.y ? currHeight : prevHeight.y;

			//We store shadow's height in 10 bits, but the actual heightmap is in 16 bits.
			//If we have a height of 0.9775, it will translate to 999.98 rounding to 1000
			//Thus when sampling, the objects on top of the terrain will be shadowed by the
			//terrain at that spot. Thus we subtract 1 from the height, and add 1 to
			//invHeightLength for a smooth gradient (which also prevents div. by zero).
			float2 roundedHeight = floor(saturate(prevHeight.xy) * 1023.0 + 0.5) - 1.0;
			float invHeightLength = 1.0 / (roundedHeight.x - roundedHeight.y + 1); //+1 Avoids div. by zero
			roundedHeight.y *= 0.000977517;

			ShadowMap[xyPos] = float4(shadowValue, roundedHeight.y, invHeightLength, 1.0);
	
			return prevHeight;
		}

		override void Compute()
		{
			float2 prevHeight = float2(0.0, 0.0);
			float error = Delta.x * 0.5 + PerGroupData[streams.GroupId.x].deltaErrorStart;

			int x, y;
			if(streams.DispatchThreadId.x < (uint)4096)
			{
				x = StartXY[streams.DispatchThreadId.x].x;
				y = StartXY[streams.DispatchThreadId.x].y;
			}
			else
			{
				//Due to alignment nightmares, instead of doing startXY[8192];
				//we perform startXY[4096] and store the values in .zw instead of .xy
				//It only gets used if the picture is very big. This branch is coherent as
				//long as 4096 is multiple of threads_per_group_x.
				x = StartXY[streams.DispatchThreadId.x - (uint)4096].z;
				y = StartXY[streams.DispatchThreadId.x - (uint)4096].w;
			}
	
			int numIterations = PerGroupData[streams.GroupId.x].iterations;
			for(int i=0; i<numIterations; ++i)
			{
				if(IsSteep)
					prevHeight = CalcShadow(int2(y, x), prevHeight);
				else
					prevHeight = CalcShadow(int2(x, y), prevHeight);

				error -= Delta.y;
				if(error < 0)
				{
					y += XyStep.y;
					error += Delta.x;
				}
		
				x += XyStep.x;
			}
		}
    };
}
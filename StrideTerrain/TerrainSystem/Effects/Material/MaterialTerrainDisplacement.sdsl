namespace StrideTerrain.TerrainSystem.Effects.Material
{
    shader MaterialTerrainDisplacement 
        : IMaterialSurface, PositionStream4, NormalStream, TransformationBase, Transformation, ShaderBase, Texturing, TerrainData, TerrainStreams, TerrainMaterialStreams
    {
        stage stream uint VertexId : SV_VERTEXID;

        rgroup PerMaterial
        {
            stage StructuredBuffer<int> ChunkInstanceData;
        }

        override void Compute()
        {
            int chunkIndex = ChunkInstanceData[streams.InstanceID];

            ChunkData chunk = ChunkBuffer[chunkIndex];
            int data0 = chunk.Data0;
            int data1 = chunk.Data1;
            float2 worldPosition = float2(UnpackPosition(chunk)) * UnitsPerTexel;
            int2 uv = UnpackUv(chunk);

            streams.LodLevel = data0 & 0xFF;

            float scale = (1 << streams.LodLevel) * UnitsPerTexel;

            uint ldN = (data0 >> 8) & 0xFF;
            uint ldS = (data0 >> 16) & 0xFF;
            uint ldW = (data0 >> 24) & 0xFF;
            uint ldE = (data1) & 0xFF;

            uint quadIndex = streams.VertexId / (uint)6;
            uint offsetX = (quadIndex % ChunkSize);
            uint offsetZ = (quadIndex / ChunkSize);
            uint triangleVertex = streams.VertexId % (uint)6;

            // Merge logic (based on edge LODs and even/odd alignment)
            bool mergeNorth     = (ldN > 0) && (offsetZ == 0) && (offsetX % 2 == 0);
            bool mergeNorthAlt  = (ldN > 0) && (offsetZ == 0) && (offsetX % 2 == 1);
            bool mergeSouth     = (ldS > 0) && (offsetZ == ChunkSize - 1) && (offsetX % 2 == 0);
            bool mergeSouthAlt  = (ldS > 0) && (offsetZ == ChunkSize - 1) && (offsetX % 2 == 1);
            bool mergeWest      = (ldW > 0) && (offsetX == 0) && (offsetZ % 2 == 0);
            bool mergeWestAlt   = (ldW > 0) && (offsetX == 0) && (offsetZ % 2 == 1);
            bool mergeEast      = (ldE > 0) && (offsetX == ChunkSize - 1) && (offsetZ % 2 == 0);
            bool mergeEastAlt   = (ldE > 0) && (offsetX == ChunkSize - 1) && (offsetZ % 2 == 1);

            // Base triangle positions
            const float2 baseVerts[6] = {
                float2(1, 0), float2(1, 1), float2(0, 1),
                float2(1, 0), float2(0, 1), float2(0, 0)
            };

            // Merge offsets
            float2 mergeOffset = 0;
            switch (triangleVertex)
            {
                case 0: mergeOffset = float2(mergeNorth ? -1 : 0, mergeEastAlt ? +1 : 0); break;
                case 1: mergeOffset = float2(mergeSouth ? +1 : 0, mergeEast ? +1 : 0); break;
                case 2: mergeOffset = float2(mergeSouthAlt ? +1 : 0, mergeWest ? -1 : 0); break;
                case 3: mergeOffset = float2(mergeNorth ? -1 : 0, mergeEastAlt ? +1 : 0); break;
                case 4: mergeOffset = float2(mergeSouthAlt ? +1 : 0, mergeWest ? -1 : 0); break;
                case 5: mergeOffset = float2(mergeNorthAlt ? -1 : 0, mergeWestAlt ? -1 : 0); break;
            }

            float3 vertexPosition;
            vertexPosition.xz = baseVerts[triangleVertex] + mergeOffset;
            vertexPosition.x += offsetX;
            vertexPosition.z += offsetZ;
            vertexPosition.y = 0;
   
            streams.TerrainFract = vertexPosition.xz;

            // Compute final UV
            int2 fullUV = uv + int2(vertexPosition.xz);
            streams.TexCoord = (fullUV + 0.5f) * InvTerrainTextureSize;

            // Position in world space
            streams.Position = float4(vertexPosition * scale + float3(worldPosition.x, 0, worldPosition.y), 1);
            streams.PositionWS = streams.Position;

            // Sample height
            float height = Heightmap.SampleLevel(LinearSampler, streams.TexCoord, 0).x;
            streams.Position.y = height * MaxHeight;
            streams.TerrainHeight01 = height;
            streams.TerrainHeight = streams.Position.y;

            streams.TerrainAtlasCoord = float2(fullUV);
        }
    };
}